<?php

namespace AppBundle\Net;

class YouTube
{

    private $developerKey;
    private $numVideos = 10;
    private $order = 'relevance';
//    private $typeId = 10; // only search music videos

    public function __construct($key)
    {
        $this->developerKey = $key;
    }

    public function search($searchTerm, $searchType) {


        if ($searchTerm == "") {
            return false;
        }

        if ($searchType == 'video') {
            $query_array = ([
                "order" => $this->order,
                "maxResults" => $this->numVideos,
//                "videoCategoryId" => $this->typeId,
                "type" => $searchType,
                "q" => $searchTerm,
                "format" => "json",
            ]);
        } else { // searching playlists
            $query_array = ([
                "order" => $this->order,
                "maxResults" => $this->numVideos,
                "type" => $searchType,
                "q" => $searchTerm,
                "format" => "json",
            ]);
        }

        $url = "https://www.googleapis.com/youtube/v3/search?key=".$this->developerKey."&part=snippet&".http_build_query($query_array);

        $curl = curl_init($url);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
        $json = curl_exec($curl);
        curl_close($curl);

        // Convert to a json array and return the title/video ids
        $data = json_decode($json, true);
        $videoData = [];

        if ($searchType == 'video') {
            if ($data) {
                foreach ($data['items'] as $key => $json) {
                    if( isset($json['id']['videoId'])){

                        // Not every video has a thumb
                        if ( isset($json['snippet']['thumbnails']['high']['url'])) {
                            $thumbnail = $json['snippet']['thumbnails']['high']['url'];
                        } else {
                            $thumbnail = false;
                        }

                        $videoData[] = array("type" => "video", "title" => $json['snippet']['title'], "itemId" => $json['id']['videoId'], "thumbnail" => $thumbnail);

                    }
                }
                return $videoData;
            }
        } else {
            if ($data) {
                foreach ($data['items'] as $key => $json) {
                    if( isset($json['id']['playlistId'])){

                        // Not every video has a thumb
                        if ( isset($json['snippet']['thumbnails']['high']['url'])) {
                            $thumbnail = $json['snippet']['thumbnails']['high']['url'];
                        } else {
                            $thumbnail = false;
                        }

                        $videoData[] = array("type" => "playlist", "title" => $json['snippet']['title'], "itemId" => $json['id']['playlistId'], "thumbnail" => $thumbnail);

                    }
                }
                return $videoData;
            }
        }

        return false;

    }

    public function getBlacklistedYoutubeVideoIds(){
        return ["aI_QzHzLtgs","HI1i7kSPlmo","nLLEBAQLZ3Q","4tlAudGPXG8","AyRg1UIUkjI","K0ePj9wi5cA","p9mmhh_wvkA","mG7_WDUo2kI"];
    }

    public function getBlacklistedYoutubeVideoTitles(){
        return ["deleted video","private video"];
    }

    public function parsePlaylist($playlistId) {

        $url = 'https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId='.$playlistId.'&key='.$this->developerKey;

        $curl = curl_init($url);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
        $json = curl_exec($curl);
        curl_close($curl);

        $data = json_decode($json, true);
        $videoData = [];

        foreach ($data['items'] as $key => $json) {

            //blacklisted song ids
            if(in_array($json['snippet']['resourceId']['videoId'],$this->getBlacklistedYoutubeVideoIds())){
                continue;
            }

            //blacklisted song titles
            if(in_array(strtolower($json['snippet']['title']),$this->getBlacklistedYoutubeVideoTitles())){
                continue;
            }

            $videoData[] = array("title" => $json['snippet']['title'], "itemId" => $json['snippet']['resourceId']['videoId'], "thumbnail" => $json['snippet']['thumbnails']['high']['url']);
        }
        return $videoData;

    }

}